{"version":3,"file":"static/js/511.b32cc3f2.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/spacer.tsx","redux/contacts.selectors.js","pages/ContactsPage.jsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface SpacerProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * A flexible flex spacer that expands along the major axis of its containing flex layout.\n * It renders a `div` by default, and takes up any available space.\n *\n * @see Docs https://chakra-ui.com/flex#using-the-spacer\n */\nexport const Spacer = chakra(\"div\", {\n  baseStyle: {\n    flex: 1,\n    justifySelf: \"stretch\",\n    alignSelf: \"stretch\",\n  },\n})\n\nSpacer.displayName = \"Spacer\"\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectPhonebook = state => state.phonebook;\n\nexport const selectContacts = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.contacts\n);\nexport const selectContactsIsLoading = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.isLoading\n);\nexport const selectContactsError = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.error\n);\nexport const selectContactsFilterTerm = createSelector(\n  selectPhonebook,\n  phonebook => phonebook.filterTerm\n);\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    if (!contacts) return;\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  }\n);\n","import Loader from 'components/Loader';\nimport React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  HStack,\n  Heading,\n  Input,\n  Spacer,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport {\n  selectContactsIsLoading,\n  selectFilter,\n  selectVisibleContacts,\n} from 'redux/contacts.selectors';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from 'redux/contactsReducer';\nimport { filterContacts } from 'redux/filterSlice';\n\nconst ContactsPage = () => {\n  const { register, handleSubmit, reset } = useForm();\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onSubmit = contact => {\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const filter = useSelector(selectFilter);\n\n  const onChangeFilterValue = event =>\n    dispatch(filterContacts(event.target.value));\n\n  return (\n    <div>\n      <Box\n        rounded={'lg'}\n        bg={useColorModeValue('white', 'gray.700')}\n        boxShadow={'lg'}\n        p={8}\n        mb=\"24px\"\n      >\n        <Heading size=\"lg\" m=\"auto\">\n          Add contacts to your Phonebook\n        </Heading>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl>\n            <FormLabel>\n              Name:\n              <Input {...register('name', { required: true })} type=\"text\" />\n            </FormLabel>\n          </FormControl>\n          <FormControl>\n            <FormLabel>\n              Number\n              <Input {...register('number', { required: true })} type=\"tel\" />\n            </FormLabel>\n          </FormControl>\n          <Button type=\"submit\" colorScheme=\"orange\">\n            Add contact\n          </Button>\n        </form>\n      </Box>\n\n      {isLoading && <Loader />}\n      <Box rounded={'lg'} boxShadow={'lg'} p={8} mb=\"24px\">\n        <Heading size=\"lg\" mb=\"1\">\n          Find Contact\n        </Heading>\n        <form>\n          <FormControl>\n            <FormLabel>\n              Find contact by name\n              <Input\n                type=\"text\"\n                value={filter}\n                onChange={onChangeFilterValue}\n              ></Input>\n            </FormLabel>\n          </FormControl>\n        </form>\n      </Box>\n\n      <ul>\n        {Array.isArray(visibleContacts) &&\n          visibleContacts.map(contact => {\n            return (\n              <Box\n                rounded={'lg'}\n                boxShadow={'lg'}\n                p={8}\n                mb=\"24px\"\n                key={contact.id}\n              >\n                <HStack spacing=\"24px\">\n                  <Heading size=\"md\">{contact.name}</Heading>\n                  <Text py=\"2\">{contact.number}</Text>\n                  <Spacer />\n                  <Button\n                    variant=\"solid\"\n                    colorScheme=\"blue\"\n                    onClick={() => onDeleteContact(contact.id)}\n                  >\n                    Delete\n                  </Button>\n                </HStack>\n              </Box>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["Spacer","chakra","baseStyle","flex","justifySelf","alignSelf","displayName","selectPhonebook","state","phonebook","selectContacts","createSelector","contacts","selectContactsIsLoading","isLoading","selectFilter","error","filterTerm","filter","selectVisibleContacts","normalizedFilter","toLowerCase","contact","name","includes","_useForm","useForm","register","handleSubmit","reset","dispatch","useDispatch","visibleContacts","useSelector","useEffect","fetchContacts","_jsxs","children","Box","rounded","bg","useColorModeValue","boxShadow","p","mb","_jsx","Heading","size","m","onSubmit","addContact","FormControl","FormLabel","Input","_objectSpread","required","type","Button","colorScheme","Loader","value","onChange","event","filterContacts","target","Array","isArray","map","HStack","spacing","Text","py","number","variant","onClick","contactId","id","deleteContact","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","align","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textDecoration","textTransform","cx","__css"],"sourceRoot":""}